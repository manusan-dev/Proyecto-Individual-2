package ventanas;

import java.sql.*;
import clases.Conexion;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class GraficaEstatus extends javax.swing.JFrame {

    String user;
    int nuevoIngreso, noReparado, enRevision, Reparado, Entregado;

    String[] vector_status_nombre = new String[5];
    int[] vector_status_cantidad = new int[5];

    public GraficaEstatus() {
        initComponents();
        user = Login.user;
        setSize(550, 450);
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Técnico - Sesión de " + user);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        ImageIcon fondoPantalla = new ImageIcon("src/main/java/images/wallpaper.jpg");
        Icon icono = new ImageIcon(fondoPantalla.getImage().getScaledInstance(jLabel_Wallpaper.getWidth(), jLabel_Wallpaper.getHeight(), Image.SCALE_DEFAULT));
        jLabel_Wallpaper.setIcon(icono);
        this.repaint();

        Toolkit miPantalla = Toolkit.getDefaultToolkit();
        Image miIcono = miPantalla.getImage("src/main/java/images/icono.png");
        setIconImage(miIcono);

        try {

            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select status, count(status) as Cantidad from equipos group by status");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {

                int posicion = 0;

                do {
                    vector_status_nombre[posicion] = rs.getString(1);
                    vector_status_cantidad[posicion] = rs.getInt(2);

                    if (vector_status_nombre[posicion].equalsIgnoreCase("En revisión")) {
                        enRevision = vector_status_cantidad[posicion];
                    } else if (vector_status_nombre[posicion].equalsIgnoreCase("Entregado")) {
                        Entregado = vector_status_cantidad[posicion];
                    } else if (vector_status_nombre[posicion].equalsIgnoreCase("No reparado")) {
                        noReparado = vector_status_cantidad[posicion];
                    } else if (vector_status_nombre[posicion].equalsIgnoreCase("Nuevo ingreso")) {
                        nuevoIngreso = vector_status_cantidad[posicion];
                    } else if (vector_status_nombre[posicion].equalsIgnoreCase("Reparado")) {
                        Reparado = vector_status_cantidad[posicion];
                    }
                    posicion++;
                } while (rs.next());
            }
        } catch (SQLException e) {
            System.err.println("Error en conectar la base de datos " + e);
            JOptionPane.showMessageDialog(null, "Error! Contacte al Administrador");
        }
        repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_footer = new javax.swing.JLabel();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gráfica de Estatus");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel_footer.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_footer.setText("Desarrollado por Manuel Sánchez ®");
        getContentPane().add(jLabel_footer, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, -1, -1));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficaEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficaEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficaEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficaEstatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficaEstatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Wallpaper;
    private javax.swing.JLabel jLabel_footer;
    // End of variables declaration//GEN-END:variables

    public int StatusMasRepetido(int nuevoIngreso, int noReparado, int enRevision, int Reparado, int Entregado){
            if (nuevoIngreso > noReparado && nuevoIngreso > enRevision && nuevoIngreso > Reparado && nuevoIngreso > Entregado) {
                return nuevoIngreso;
        } else if(noReparado > enRevision && noReparado > Reparado && noReparado > Entregado){
                return noReparado;
        } else if(enRevision > Reparado && enRevision > Entregado){
                return enRevision;
        } else if(Reparado > Entregado){
                return Reparado;
        } else{
                return Entregado;
        }
    }

    @Override
    public void paint(Graphics g){
        super.paint(g);
        int status_Mas_Repetido = StatusMasRepetido(nuevoIngreso, noReparado, enRevision, Reparado, Entregado);
        
        int largo_nuevoIngreso = nuevoIngreso * 400 / status_Mas_Repetido;
        int largo_noReparado = noReparado * 400 / status_Mas_Repetido;
        int largo_enRevision = enRevision * 400 / status_Mas_Repetido;
        int largo_Reparado = Reparado * 400 / status_Mas_Repetido;
        int largo_Entregado = Entregado * 400 / status_Mas_Repetido;
        
        // color amarillo
        g.setColor(new Color(240, 248, 0));
        g.fillRect(100, 100, largo_nuevoIngreso, 40);
        g.drawString("Nuevo Ingreso", 10, 118);
        g.drawString("Cantidad " + nuevoIngreso, 10, 133);
        
        // color rojo
        g.setColor(new Color(255, 0, 0));
        g.fillRect(100, 150, largo_noReparado, 40);
        g.drawString("No reparado", 10, 168);
        g.drawString("Cantidad " + noReparado, 10, 183);
        
        // color negro
        g.setColor(new Color(0, 0, 0));
        g.fillRect(100, 200, largo_enRevision, 40);
        g.drawString("En revisión", 10, 218);
        g.drawString("Cantidad " + enRevision, 10, 233);
        
        // color blanco
        g.setColor(new Color(255, 255, 255));
        g.fillRect(100, 250, largo_Reparado, 40);
        g.drawString("Reparado", 10, 268);
        g.drawString("Cantidad " + Reparado, 10, 283);
        
        // color verde
        g.setColor(new Color(0, 85, 0));
        g.fillRect(100, 300, largo_Entregado, 40);
        g.drawString("Entregado", 10, 318);
        g.drawString("Cantidad " + Entregado, 10, 333);
        
    }
}






